#BlueJ class context
comment0.target=MagicSquare
comment0.text=\n\ This\ class\ has\ methods\ to\ determine\ if\ a\ square\ 2-dimensional\ array\ is\ a\ Magic\ Square\n\ \n\ Square\ array\ ->\ \ \ \ \ \ a\ 2D\ array\ where\ the\ number\ of\ rows\ and\ columns\ are\ the\ same\n\ Rectangular\ array\ ->\ a\ 2D\ array\ where\ the\ number\ of\ rows\ and\ columns\ may\ be\ different,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ but\ the\ number\ of\ columns\ is\ the\ same\ for\ each\ row\n\n\ @author\ Caleb\ Wang\n\ @version\ 2/28/2023\n
comment1.params=array
comment1.target=boolean\ isSquareArray(int[][])
comment1.text=Determines\ if\ a\ given\ 2D\ array\ is\ square
comment10.params=square\ rowOffset
comment10.target=int\ firstDiagonalSum(int[][],\ int)
comment10.text=\ \n\ \ Returns\ the\ sum\ of\ the\ first\ diagonal\ (upper\ left\ to\ lower\ right)\n\ \ with\ a\ row\ offset\ of\ a\ square\ 2D\ array\ (includes\ broken\ diagonals)\n\ \ @Precondition\:\ square\ is\ a\ square\ array\n
comment11.params=square\ rowOffset
comment11.target=int\ secondDiagonalSum(int[][],\ int)
comment11.text=\ \n\ \ Returns\ the\ sum\ of\ the\ first\ broken\ diagonal\ (lower\ left\ to\ upper\ right)\n\ \ with\ a\ row\ offset\ of\ a\ square\ 2D\ array\ (includes\ broken\ diagonals)\n\ \ @Precondition\:\ square\ is\ a\ square\ array\n
comment12.params=array
comment12.target=boolean\ isPanMagicSquare(int[][])
comment12.text=\ \n\ \ Determines\ if\ the\ given\ square\ 2D\ array\ is\ a\ Pan\ Magic\ Square.\n\ \n\ \ A\ Pan\ Magic\ Square\ is\ Magic\ Square\ but\ where\ the\ 'broken'\ diagonals\n\ \ also\ sum\ to\ the\ same\ value\ as\ both\ primary\ diagonals\ and\ the\ rows\ \n\ \ and\ columns.\ \n
comment2.params=array\ number
comment2.target=boolean\ isNumberUnique(int[][],\ int)
comment2.text=Determines\ if\ a\ given\ number\ appears\ only\ once\ in\ a\ 2D\ array
comment3.params=array
comment3.target=boolean\ isEveryNumberUnique(int[][])
comment4.params=array\ col
comment4.target=int\ colSum(int[][],\ int)
comment4.text=Returns\ the\ sum\ of\ a\ given\ column\ of\ a\ 2D\ rectangular\ array
comment5.params=array\ row
comment5.target=int\ rowSum(int[][],\ int)
comment5.text=Returns\ the\ sum\ of\ a\ given\ row\ of\ a\ 2D\ rectangular\ array
comment6.params=array
comment6.target=boolean\ isSemiMagicSquare(int[][])
comment6.text=\ \n\ \ Determines\ if\ the\ given\ square\ 2D\ array\ is\ a\ Semi-Magic\ Square.\n\ \n\ \ A\ Semi-Magic\ Square\ is\ where\ all\ of\ the\ rows\ and\ columns\n\ \ of\ a\ square\ 2D\ integer\ array\ sum\ to\ the\ same\ value.\n
comment7.params=square
comment7.target=int\ firstDiagonalSum(int[][])
comment7.text=\ \n\ \ Returns\ the\ sum\ of\ the\ first\ diagonal\ (upper\ left\ to\ lower\ right)\n\ \ of\ a\ square\ 2D\ array\n\ \ @Precondition\:\ square\ is\ a\ square\ array\n
comment8.params=square
comment8.target=int\ secondDiagonalSum(int[][])
comment8.text=\ \n\ \ Returns\ the\ sum\ of\ the\ second\ diagonal\ (lower\ left\ to\ upper\ right)\n\ \ of\ a\ square\ 2D\ array\n\ \ @Precondition\:\ square\ is\ a\ square\ array\n
comment9.params=array
comment9.target=boolean\ isMagicSquare(int[][])
comment9.text=\ \n\ \ Determines\ if\ the\ given\ square\ 2D\ array\ is\ a\ Magic\ Square.\n\ \n\ \ A\ Magic\ Square\ is\ a\ Semi-Magic\ Square\ but\ where\ both\ diagonals\n\ \ also\ sum\ to\ the\ same\ value\ as\ the\ rows\ and\ columns.\n
numComments=13
